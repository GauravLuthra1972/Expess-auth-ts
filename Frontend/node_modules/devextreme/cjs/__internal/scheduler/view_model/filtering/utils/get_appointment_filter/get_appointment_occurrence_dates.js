/**
 * DevExtreme (cjs/__internal/scheduler/view_model/filtering/utils/get_appointment_filter/get_appointment_occurrence_dates.js)
 * Version: 25.1.6
 * Build date: Mon Oct 13 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getShiftedAllDayStartDate = exports.getShiftedAllDayEndDate = exports.getAppointmentOccurrenceDates = void 0;
var _date = require("../../../../../core/utils/date");
var _m_date = require("../../../../../core/utils/m_date");
const toMs = _m_date.dateUtils.dateToMilliseconds;
const SECOND_MS = toMs("second");
const DAY_MS = toMs("day");
const DAY_WITHOUT_ONE_SECOND_MS = toMs("day") - toMs("second");
const getShiftedAllDayStartDate = (originalStartDate, viewOffset) => {
    const trimmedDate = _m_date.dateUtils.trimTime(originalStartDate);
    const startOfDay = _date.dateUtilsTs.addOffsets(trimmedDate, [viewOffset]);
    const endOfDay = _date.dateUtilsTs.addOffsets(trimmedDate, [DAY_WITHOUT_ONE_SECOND_MS, viewOffset]);
    switch (true) {
        case originalStartDate > endOfDay:
            return _date.dateUtilsTs.addOffsets(endOfDay, [SECOND_MS]);
        case originalStartDate < startOfDay:
            return _date.dateUtilsTs.addOffsets(startOfDay, [-DAY_MS]);
        default:
            return startOfDay
    }
};
exports.getShiftedAllDayStartDate = getShiftedAllDayStartDate;
const getShiftedAllDayEndDate = (originalEndDate, viewOffset) => {
    const trimmedDate = _m_date.dateUtils.trimTime(originalEndDate);
    const startOfDay = _date.dateUtilsTs.addOffsets(trimmedDate, [viewOffset]);
    const endOfDay = _date.dateUtilsTs.addOffsets(trimmedDate, [DAY_WITHOUT_ONE_SECOND_MS, viewOffset]);
    switch (true) {
        case originalEndDate > endOfDay:
            return _date.dateUtilsTs.addOffsets(endOfDay, [DAY_MS]);
        case originalEndDate < startOfDay:
            return _date.dateUtilsTs.addOffsets(startOfDay, [-SECOND_MS]);
        default:
            return endOfDay
    }
};
exports.getShiftedAllDayEndDate = getShiftedAllDayEndDate;
const getAppointmentOccurrenceDates = (_ref, viewOffset) => {
    let {
        startDate: originalStartDate,
        endDate: originalEndDate,
        allDay: allDay
    } = _ref;
    switch (true) {
        case !allDay:
            return {
                startDate: originalStartDate, endDate: originalEndDate
            };
        case 0 === viewOffset:
            return {
                startDate: _m_date.dateUtils.trimTime(originalStartDate), endDate: _date.dateUtilsTs.addOffsets(_m_date.dateUtils.trimTime(originalEndDate), [DAY_WITHOUT_ONE_SECOND_MS])
            };
        default:
            return {
                startDate: getShiftedAllDayStartDate(originalStartDate, viewOffset), endDate: getShiftedAllDayEndDate(originalEndDate, viewOffset)
            }
    }
};
exports.getAppointmentOccurrenceDates = getAppointmentOccurrenceDates;
