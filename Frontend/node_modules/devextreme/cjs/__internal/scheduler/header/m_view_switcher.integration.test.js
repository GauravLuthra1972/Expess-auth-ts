/**
 * DevExtreme (cjs/__internal/scheduler/header/m_view_switcher.integration.test.js)
 * Version: 25.1.6
 * Build date: Mon Oct 13 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var _globals = require("@jest/globals");
var _renderer = _interopRequireDefault(require("../../../core/renderer"));
var _localization = require("../../../localization");
var _scheduler = _interopRequireDefault(require("../../../ui/scheduler"));

function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        default: e
    }
}

function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) {
                ({}).hasOwnProperty.call(t, r) && (n[r] = t[r])
            }
        }
        return n
    }, _extends.apply(null, arguments)
}
const SCHEDULER_CONTAINER_ID = "schedulerContainer";
const SELECTORS = {
    schedulerContainer: "#schedulerContainer",
    invisibleState: ".dx-state-invisible",
    viewSwitcher: ".dx-scheduler-view-switcher",
    viewSwitcherButton: ".dx-scheduler-view-switcher .dx-button"
};
const createScheduler = options => new Promise((resolve => {
    const $container = (0, _renderer.default)("<div>").attr("id", "schedulerContainer").appendTo(document.body);
    const instance = new _scheduler.default($container.get(0), _extends({}, options, {
        onContentReady: () => {
            resolve({
                $container: $container,
                instance: instance
            })
        }
    }))
}));
(0, _globals.describe)("ViewSwitcher", (() => {
    (0, _globals.afterEach)((() => {
        const $container = (0, _renderer.default)(SELECTORS.schedulerContainer);
        const scheduler = $container.dxScheduler("instance");
        scheduler.dispose();
        $container.remove()
    }));
    (0, _globals.describe)("Localization", (() => {
        (0, _globals.it)("should display Russian view names when locale is set to Russian", (async () => {
            (0, _localization.loadMessages)({
                ru: {
                    "dxScheduler-switcherDay": "\u0414\u0435\u043d\u044c",
                    "dxScheduler-switcherWeek": "\u041d\u0435\u0434\u0435\u043b\u044f",
                    "dxScheduler-switcherMonth": "\u041c\u0435\u0441\u044f\u0446"
                }
            });
            (0, _localization.locale)("ru");
            const {
                $container: $container
            } = await createScheduler({
                useDropDownViewSwitcher: false,
                currentView: "day",
                views: ["day", "week", "month"]
            });
            const buttons = $container.find(SELECTORS.viewSwitcherButton);
            const buttonTexts = [];
            buttons.each(((_, button) => {
                buttonTexts.push((0, _renderer.default)(button).text());
                return true
            }));
            (0, _globals.expect)(buttonTexts).toContain("\u0414\u0435\u043d\u044c");
            (0, _globals.expect)(buttonTexts).toContain("\u041d\u0435\u0434\u0435\u043b\u044f");
            (0, _globals.expect)(buttonTexts).toContain("\u041c\u0435\u0441\u044f\u0446")
        }));
        (0, _globals.it)("should display Russian view names in dropdown switcher when locale is set to Russian", (async () => {
            (0, _localization.loadMessages)({
                ru: {
                    "dxScheduler-switcherDay": "\u0414\u0435\u043d\u044c",
                    "dxScheduler-switcherWeek": "\u041d\u0435\u0434\u0435\u043b\u044f",
                    "dxScheduler-switcherMonth": "\u041c\u0435\u0441\u044f\u0446"
                }
            });
            (0, _localization.locale)("ru");
            const {
                $container: $container
            } = await createScheduler({
                useDropDownViewSwitcher: true,
                currentView: "day",
                views: ["day", "week", "month"]
            });
            const viewSwitcher = $container.find(SELECTORS.viewSwitcher);
            const dropdown = viewSwitcher.find(".dx-dropdownbutton");
            const buttonText = dropdown.find(".dx-button-text");
            (0, _globals.expect)(buttonText.text()).toBe("\u0414\u0435\u043d\u044c")
        }))
    }))
}));
