/**
 * DevExtreme (esm/__internal/ui/file_uploader.js)
 * Version: 25.1.6
 * Build date: Mon Oct 13 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import eventsEngine from "../../common/core/events/core/events_engine";
import {
    addNamespace,
    isTouchEvent,
    normalizeKeyName
} from "../../common/core/events/utils/index";
import messageLocalization from "../../common/core/localization/message";
import registerComponent from "../../core/component_registrator";
import devices from "../../core/devices";
import domAdapter from "../../core/dom_adapter";
import Guid from "../../core/guid";
import $ from "../../core/renderer";
import ajax from "../../core/utils/ajax";
import Callbacks from "../../core/utils/callbacks";
import {
    Deferred
} from "../../core/utils/deferred";
import {
    extend
} from "../../core/utils/extend";
import {
    getOffset,
    getWidth
} from "../../core/utils/size";
import {
    isDefined,
    isFunction,
    isNumeric
} from "../../core/utils/type";
import {
    getWindow
} from "../../core/utils/window";
import Button from "../../ui/button";
import ProgressBar from "../../ui/progress_bar";
import {
    current,
    isFluent,
    isMaterial
} from "../../ui/themes";
import {
    fromPromise
} from "../core/utils/m_deferred";
import Editor from "../ui/editor/editor";
const window = getWindow();
const FILEUPLOADER_CLASS = "dx-fileuploader";
const FILEUPLOADER_EMPTY_CLASS = "dx-fileuploader-empty";
const FILEUPLOADER_SHOW_FILE_LIST_CLASS = "dx-fileuploader-show-file-list";
const FILEUPLOADER_DRAGOVER_CLASS = "dx-fileuploader-dragover";
const FILEUPLOADER_WRAPPER_CLASS = "dx-fileuploader-wrapper";
const FILEUPLOADER_CONTAINER_CLASS = "dx-fileuploader-container";
const FILEUPLOADER_CONTENT_CLASS = "dx-fileuploader-content";
const FILEUPLOADER_INPUT_WRAPPER_CLASS = "dx-fileuploader-input-wrapper";
const FILEUPLOADER_INPUT_CONTAINER_CLASS = "dx-fileuploader-input-container";
const FILEUPLOADER_INPUT_LABEL_CLASS = "dx-fileuploader-input-label";
const FILEUPLOADER_INPUT_CLASS = "dx-fileuploader-input";
const FILEUPLOADER_FILES_CONTAINER_CLASS = "dx-fileuploader-files-container";
const FILEUPLOADER_FILE_CONTAINER_CLASS = "dx-fileuploader-file-container";
const FILEUPLOADER_FILE_INFO_CLASS = "dx-fileuploader-file-info";
const FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS = "dx-fileuploader-file-status-message";
const FILEUPLOADER_FILE_CLASS = "dx-fileuploader-file";
const FILEUPLOADER_FILE_NAME_CLASS = "dx-fileuploader-file-name";
const FILEUPLOADER_FILE_SIZE_CLASS = "dx-fileuploader-file-size";
const FILEUPLOADER_BUTTON_CLASS = "dx-fileuploader-button";
const FILEUPLOADER_BUTTON_CONTAINER_CLASS = "dx-fileuploader-button-container";
const FILEUPLOADER_CANCEL_BUTTON_CLASS = "dx-fileuploader-cancel-button";
const FILEUPLOADER_UPLOAD_BUTTON_CLASS = "dx-fileuploader-upload-button";
const FILEUPLOADER_INVALID_CLASS = "dx-fileuploader-invalid";
const FILEUPLOADER_AFTER_LOAD_DELAY = 400;
const FILEUPLOADER_CHUNK_META_DATA_NAME = "chunkMetadata";
const DRAG_EVENT_DELTA = 1;
const DIALOG_TRIGGER_EVENT_NAMESPACE = "dxFileUploaderDialogTrigger";
const keyUpEventName = "keyup";
const nativeClickEvent = "click";
const ENTER_KEY = "enter";
const SPACE_KEY = "space";
let renderFileUploaderInput = () => $("<input>").attr("type", "file");
const isFormDataSupported = () => !!window.FormData;
class FileBlobReader {
    constructor(file, chunkSize) {
        this.file = file;
        this.chunkSize = chunkSize;
        this.index = 0
    }
    read() {
        if (!this.file) {
            return null
        }
        const result = this.createBlobResult(this.file, this.index, this.chunkSize);
        if (result.isCompleted) {
            this.file = null
        }
        this.index += 1;
        return result
    }
    createBlobResult(file, index, chunkSize) {
        const currentPosition = index * chunkSize;
        return {
            blob: this.sliceFile(file, currentPosition, chunkSize),
            index: index,
            isCompleted: currentPosition + chunkSize >= file.size
        }
    }
    sliceFile(file, startPos, length) {
        if (file.slice) {
            return file.slice(startPos, startPos + length)
        }
        if ("webkitSlice" in file && "function" === typeof file.webkitSlice) {
            return file.webkitSlice(startPos, startPos + length)
        }
        return null
    }
}
class FileUploadStrategyBase {
    constructor(fileUploader) {
        this.fileUploader = fileUploader
    }
    upload(file) {
        if (file.isInitialized && file.isAborted) {
            var _this$fileUploader;
            null === (_this$fileUploader = this.fileUploader) || void 0 === _this$fileUploader || _this$fileUploader._resetFileState(file)
        }
        if (file.isValid() && !file.uploadStarted) {
            this._prepareFileBeforeUpload(file);
            this._uploadCore(file)
        }
    }
    abortUpload(file) {
        var _file$request;
        if (file._isError || file._isLoaded || file.isAborted || !file.uploadStarted) {
            return
        }
        file.isAborted = true;
        null === (_file$request = file.request) || void 0 === _file$request || _file$request.abort();
        if (this._isCustomCallback("abortUpload")) {
            const {
                abortUpload: abortUpload
            } = this.fileUploader.option();
            const arg = this._createUploadArgument(file);
            let deferred = null;
            try {
                const result = null === abortUpload || void 0 === abortUpload ? void 0 : abortUpload(file.value, arg);
                deferred = fromPromise(result)
            } catch (error) {
                deferred = Deferred().reject(error).promise()
            }
            if (deferred && "done" in deferred) {
                var _deferred;
                null === (_deferred = deferred) || void 0 === _deferred || _deferred.done((() => file.onAbort.fire())).fail((error => this._handleFileError(file, error)))
            }
        }
    }
    _beforeSend(xhr, file) {
        var _this$fileUploader$_b, _this$fileUploader2;
        const arg = this._createUploadArgument(file);
        null === (_this$fileUploader$_b = (_this$fileUploader2 = this.fileUploader)._beforeSendAction) || void 0 === _this$fileUploader$_b || _this$fileUploader$_b.call(_this$fileUploader2, {
            request: xhr,
            file: file.value,
            uploadInfo: arg
        });
        file.request = xhr
    }
    _createUploadArgument(_file) {
        return {
            bytesUploaded: 0,
            chunkCount: 0,
            customData: {},
            chunkBlob: new Blob,
            chunkIndex: 0
        }
    }
    _uploadCore(_file) {}
    _isCustomCallback(name) {
        var _this$fileUploader3;
        const callback = null === (_this$fileUploader3 = this.fileUploader) || void 0 === _this$fileUploader3 ? void 0 : _this$fileUploader3.option(name);
        return callback && isFunction(callback)
    }
    _handleProgress(file, e) {
        if (file._isError) {
            return
        }
        file._isProgressStarted = true;
        this._handleProgressCore(file, e)
    }
    _handleProgressCore(_file, _e) {}
    _handleFileError(file, error) {
        file._isError = true;
        file.onError.fire(error)
    }
    _prepareFileBeforeUpload(file) {
        if (file.$file) {
            var _file$progressBar;
            null === (_file$progressBar = file.progressBar) || void 0 === _file$progressBar || _file$progressBar.dispose();
            this.fileUploader._createFileProgressBar(file)
        }
        if (file.isInitialized) {
            return
        }
        file.onLoadStart.add(this._onUploadStarted.bind(this, file));
        file.onLoad.add(this._onLoadedHandler.bind(this, file));
        file.onError.add(this._onErrorHandler.bind(this, file));
        file.onAbort.add(this._onAbortHandler.bind(this, file));
        file.onProgress.add(this._onProgressHandler.bind(this, file));
        file.isInitialized = true
    }
    _shouldHandleError(file, e) {
        return (this._isStatusError(e.status) || !file._isProgressStarted) && !file.isAborted
    }
    _isStatusError(status) {
        return status >= 400 && status < 500 || status >= 500 && status < 600
    }
    _onUploadStarted(file, e) {
        var _this$fileUploader4, _this$fileUploader4$_;
        file.uploadStarted = true;
        null === (_this$fileUploader4 = this.fileUploader) || void 0 === _this$fileUploader4 || null === (_this$fileUploader4$_ = _this$fileUploader4._uploadStartedAction) || void 0 === _this$fileUploader4$_ || _this$fileUploader4$_.call(_this$fileUploader4, {
            file: file.value,
            event: e,
            request: file.request
        })
    }
    _onAbortHandler(file, e) {
        var _this$fileUploader5, _this$fileUploader$_u, _this$fileUploader6;
        const args = {
            file: file.value,
            event: e,
            request: file.request,
            message: null === (_this$fileUploader5 = this.fileUploader) || void 0 === _this$fileUploader5 ? void 0 : _this$fileUploader5._getUploadAbortedStatusMessage()
        };
        null === (_this$fileUploader$_u = (_this$fileUploader6 = this.fileUploader)._uploadAbortedAction) || void 0 === _this$fileUploader$_u || _this$fileUploader$_u.call(_this$fileUploader6, args);
        this.fileUploader._setStatusMessage(file, args.message);
        this.fileUploader._handleAllFilesUploaded()
    }
    _onErrorHandler(file, error) {
        var _this$fileUploader$_u2, _this$fileUploader7, _this$fileUploader$_s, _this$fileUploader8;
        const {
            uploadFailedMessage: uploadFailedMessage
        } = this.fileUploader.option();
        const args = {
            file: file.value,
            event: void 0,
            request: file.request,
            error: error,
            message: uploadFailedMessage
        };
        null === (_this$fileUploader$_u2 = (_this$fileUploader7 = this.fileUploader)._uploadErrorAction) || void 0 === _this$fileUploader$_u2 || _this$fileUploader$_u2.call(_this$fileUploader7, args);
        null === (_this$fileUploader$_s = (_this$fileUploader8 = this.fileUploader)._setStatusMessage) || void 0 === _this$fileUploader$_s || _this$fileUploader$_s.call(_this$fileUploader8, file, args.message);
        this.fileUploader._handleAllFilesUploaded()
    }
    _onLoadedHandler(file, e) {
        var _this$fileUploader$_u3, _this$fileUploader9;
        const {
            uploadedMessage: uploadedMessage
        } = this.fileUploader.option();
        const args = {
            file: file.value,
            event: e,
            request: file.request,
            message: uploadedMessage
        };
        file._isLoaded = true;
        null === (_this$fileUploader$_u3 = (_this$fileUploader9 = this.fileUploader)._uploadedAction) || void 0 === _this$fileUploader$_u3 || _this$fileUploader$_u3.call(_this$fileUploader9, args);
        this.fileUploader._setStatusMessage(file, args.message);
        this.fileUploader._handleAllFilesUploaded()
    }
    _onProgressHandler(file, e) {
        if (file) {
            const totalFilesSize = this.fileUploader._getTotalFilesSize();
            const totalLoadedFilesSize = this.fileUploader._getTotalLoadedFilesSize();
            const loaded = e.loaded ?? 0;
            const loadedSize = Math.min(loaded, file.value.size);
            const segmentSize = loadedSize - file.loadedSize;
            file.loadedSize = loadedSize;
            this.fileUploader._updateTotalProgress(totalFilesSize, totalLoadedFilesSize + segmentSize);
            this.fileUploader._updateProgressBar(file, this._getLoadedData(loadedSize, e.total, segmentSize, e))
        }
    }
    _getLoadedData(loaded, total, currentSegmentSize, _event) {
        return {
            loaded: loaded,
            total: total,
            currentSegmentSize: currentSegmentSize
        }
    }
    _extendFormData(formData) {
        const {
            uploadCustomData: formDataEntries
        } = this.fileUploader.option();
        for (const entryName in formDataEntries) {
            if (Object.prototype.hasOwnProperty.call(formDataEntries, entryName) && isDefined(formDataEntries[entryName])) {
                formData.append(entryName, formDataEntries[entryName])
            }
        }
    }
}
class ChunksFileUploadStrategyBase extends FileUploadStrategyBase {
    constructor(fileUploader) {
        super(fileUploader);
        const {
            chunkSize: chunkSize
        } = this.fileUploader.option();
        this.chunkSize = chunkSize ?? 0
    }
    _uploadCore(file) {
        const realFile = file.value;
        const chunksData = {
            name: realFile.name,
            loadedBytes: 0,
            type: realFile.type,
            blobReader: new FileBlobReader(realFile, this.chunkSize),
            guid: new Guid,
            fileSize: realFile.size,
            count: this._getFileChunksCount(realFile),
            customData: {}
        };
        file.chunksData = chunksData;
        this._sendChunk(file, chunksData)
    }
    _getFileChunksCount(jsFile) {
        return 0 === jsFile.size ? 1 : Math.ceil(jsFile.size / this.chunkSize)
    }
    _sendChunk(file, chunksData) {
        const chunk = chunksData.blobReader.read();
        chunksData.currentChunk = chunk;
        if (chunk) {
            this._sendChunkCore(file, chunksData, chunk).done((() => {
                var _chunk$blob;
                if (file.isAborted) {
                    return
                }
                chunksData.loadedBytes += (null === (_chunk$blob = chunk.blob) || void 0 === _chunk$blob ? void 0 : _chunk$blob.size) ?? 0;
                file.onProgress.fire({
                    loaded: chunksData.loadedBytes,
                    total: file.value.size
                });
                if (chunk.isCompleted) {
                    file.onLoad.fire()
                }
                setTimeout((() => this._sendChunk(file, chunksData)))
            })).fail((error => {
                if (this._shouldHandleError(file, error)) {
                    this._handleFileError(file, error)
                }
            }))
        }
    }
    _sendChunkCore(_file, _chunksData, _chunk) {
        return Deferred().reject()
    }
    _tryRaiseStartLoad(file) {
        if (!file.isStartLoad) {
            file.isStartLoad = true;
            file.onLoadStart.fire()
        }
    }
    _getEvent(_e) {
        return null
    }
    _createUploadArgument(file) {
        return this._createChunksInfo(file.chunksData)
    }
    _createChunksInfo(chunksData) {
        var _chunksData$currentCh, _chunksData$currentCh2;
        return {
            bytesUploaded: (null === chunksData || void 0 === chunksData ? void 0 : chunksData.loadedBytes) ?? 0,
            chunkCount: (null === chunksData || void 0 === chunksData ? void 0 : chunksData.count) ?? 0,
            customData: (null === chunksData || void 0 === chunksData ? void 0 : chunksData.customData) ?? {},
            chunkBlob: (null === chunksData || void 0 === chunksData || null === (_chunksData$currentCh = chunksData.currentChunk) || void 0 === _chunksData$currentCh ? void 0 : _chunksData$currentCh.blob) ?? new Blob,
            chunkIndex: (null === chunksData || void 0 === chunksData || null === (_chunksData$currentCh2 = chunksData.currentChunk) || void 0 === _chunksData$currentCh2 ? void 0 : _chunksData$currentCh2.index) ?? 0
        }
    }
}
class DefaultChunksFileUploadStrategy extends ChunksFileUploadStrategyBase {
    _sendChunkCore(file, chunksData, chunk) {
        const {
            uploadUrl: uploadUrl,
            uploadMethod: uploadMethod,
            uploadHeaders: uploadHeaders,
            name: name
        } = this.fileUploader.option();
        return ajax.sendRequest({
            url: uploadUrl,
            method: uploadMethod,
            headers: uploadHeaders,
            beforeSend: xhr => this._beforeSend(xhr, file),
            upload: {
                onprogress: e => this._handleProgress(file, e),
                onloadstart: () => this._tryRaiseStartLoad(file),
                onabort: () => file.onAbort.fire()
            },
            data: this._createFormData({
                fileName: chunksData.name,
                blobName: name,
                blob: chunk.blob,
                index: chunk.index,
                count: chunksData.count,
                type: chunksData.type,
                guid: chunksData.guid,
                size: chunksData.fileSize
            })
        })
    }
    _createFormData(options) {
        const formData = new window.FormData;
        formData.append(options.blobName, options.blob);
        formData.append("chunkMetadata", JSON.stringify({
            FileName: options.fileName,
            Index: options.index,
            TotalCount: options.count,
            FileSize: options.size,
            FileType: options.type,
            FileGuid: options.guid
        }));
        this._extendFormData(formData);
        return formData
    }
}
class CustomChunksFileUploadStrategy extends ChunksFileUploadStrategyBase {
    _sendChunkCore(file, chunksData) {
        this._tryRaiseStartLoad(file);
        const chunksInfo = this._createChunksInfo(chunksData);
        const {
            uploadChunk: uploadChunk
        } = this.fileUploader.option();
        try {
            const result = null === uploadChunk || void 0 === uploadChunk ? void 0 : uploadChunk(file.value, chunksInfo);
            return fromPromise(result)
        } catch (error) {
            return Deferred().reject(error).promise()
        }
    }
    _shouldHandleError(_file, _error) {
        return true
    }
}
class WholeFileUploadStrategyBase extends FileUploadStrategyBase {
    _uploadCore(file) {
        file.loadedSize = 0;
        const uploadFileDeferred = this._uploadFile(file);
        if ("done" in uploadFileDeferred) {
            uploadFileDeferred.done((() => {
                if (!file.isAborted) {
                    file.onLoad.fire()
                }
            })).fail((error => {
                if (this._shouldHandleError(file, error)) {
                    this._handleFileError(file, error)
                }
            }))
        }
    }
    _uploadFile(_file) {
        return Deferred().reject()
    }
    _handleProgressCore(file, e) {
        file.onProgress.fire(e)
    }
    _getLoadedData(loaded, total, segmentSize, event) {
        const result = super._getLoadedData(loaded, total, segmentSize, event);
        result.event = event;
        return result
    }
}
class DefaultWholeFileUploadStrategy extends WholeFileUploadStrategyBase {
    _uploadFile(file) {
        const {
            uploadUrl: uploadUrl,
            uploadMethod: uploadMethod,
            uploadHeaders: uploadHeaders,
            name: name
        } = this.fileUploader.option();
        return ajax.sendRequest({
            url: uploadUrl,
            method: uploadMethod,
            headers: uploadHeaders,
            beforeSend: xhr => this._beforeSend(xhr, file),
            upload: {
                onprogress: e => this._handleProgress(file, e),
                onloadstart: () => file.onLoadStart.fire(),
                onabort: () => file.onAbort.fire()
            },
            data: this._createFormData(name, file.value)
        })
    }
    _createFormData(fieldName, fieldValue) {
        const formData = new window.FormData;
        formData.append(fieldName, fieldValue, null === fieldValue || void 0 === fieldValue ? void 0 : fieldValue.name);
        this._extendFormData(formData);
        return formData
    }
}
class CustomWholeFileUploadStrategy extends WholeFileUploadStrategyBase {
    _uploadFile(file) {
        file.onLoadStart.fire();
        const progressCallback = loadedBytes => {
            const arg = {
                loaded: loadedBytes,
                total: file.value.size
            };
            this._handleProgress(file, arg)
        };
        const {
            uploadFile: uploadFile
        } = this.fileUploader.option();
        try {
            const result = null === uploadFile || void 0 === uploadFile ? void 0 : uploadFile(file.value, progressCallback);
            return fromPromise(result)
        } catch (error) {
            return Deferred().reject(error).promise()
        }
    }
    _shouldHandleError(_file, _e) {
        return true
    }
}
class FileUploader extends Editor {
    _supportedKeys() {
        const click = e => {
            e.preventDefault();
            const $selectButton = this._selectButton.$element();
            eventsEngine.triggerHandler($selectButton, {
                type: "dxclick"
            })
        };
        return _extends({}, super._supportedKeys(), {
            space: click,
            enter: click
        })
    }
    _setOptionsByReference() {
        super._setOptionsByReference();
        extend(this._optionsByReference, {
            value: true
        })
    }
    _getDefaultOptions() {
        return _extends({}, super._getDefaultOptions(), {
            chunkSize: 0,
            value: [],
            selectButtonText: messageLocalization.format("dxFileUploader-selectFile"),
            uploadButtonText: messageLocalization.format("dxFileUploader-upload"),
            labelText: messageLocalization.format("dxFileUploader-dropFile"),
            name: "files[]",
            multiple: false,
            accept: "",
            uploadUrl: "/",
            allowCanceling: true,
            showFileList: true,
            progress: 0,
            dialogTrigger: void 0,
            dropZone: void 0,
            readyToUploadMessage: messageLocalization.format("dxFileUploader-readyToUpload"),
            uploadedMessage: messageLocalization.format("dxFileUploader-uploaded"),
            uploadFailedMessage: messageLocalization.format("dxFileUploader-uploadFailedMessage"),
            uploadAbortedMessage: messageLocalization.format("dxFileUploader-uploadAbortedMessage"),
            uploadMode: "instantly",
            uploadMethod: "POST",
            uploadHeaders: {},
            uploadCustomData: {},
            onBeforeSend: null,
            onUploadStarted: null,
            onUploaded: null,
            onFilesUploaded: null,
            onProgress: null,
            onUploadError: null,
            onUploadAborted: null,
            onDropZoneEnter: null,
            onDropZoneLeave: null,
            allowedFileExtensions: [],
            maxFileSize: 0,
            minFileSize: 0,
            inputAttr: {},
            invalidFileExtensionMessage: messageLocalization.format("dxFileUploader-invalidFileExtension"),
            invalidMaxFileSizeMessage: messageLocalization.format("dxFileUploader-invalidMaxFileSize"),
            invalidMinFileSizeMessage: messageLocalization.format("dxFileUploader-invalidMinFileSize"),
            extendSelection: true,
            validationMessageMode: "always",
            uploadFile: null,
            uploadChunk: null,
            abortUpload: null,
            validationMessageOffset: {
                h: 0,
                v: 0
            },
            hoverStateEnabled: true,
            useNativeInputClick: false,
            useDragOver: true,
            nativeDropSupported: true,
            _uploadButtonType: "normal",
            _buttonStylingMode: "contained"
        })
    }
    _defaultOptionsRules() {
        return super._defaultOptionsRules().concat([{
            device: () => "desktop" === devices.real().deviceType && !devices.isSimulator(),
            options: {
                focusStateEnabled: true
            }
        }, {
            device: [{
                platform: "android"
            }],
            options: {
                validationMessageOffset: {
                    v: 0
                }
            }
        }, {
            device: () => "desktop" !== devices.real().deviceType,
            options: {
                useDragOver: false,
                nativeDropSupported: false,
                labelText: ""
            }
        }, {
            device: () => !isFormDataSupported(),
            options: {
                uploadMode: "useForm"
            }
        }, {
            device: () => isMaterial(current()),
            options: {
                _uploadButtonType: "default"
            }
        }, {
            device: () => isFluent(current()),
            options: {
                _buttonStylingMode: "text"
            }
        }])
    }
    _initOptions(options) {
        const isLabelTextDefined = "labelText" in options;
        super._initOptions(options);
        if (!isLabelTextDefined && !this._shouldDragOverBeRendered()) {
            this.option({
                labelText: ""
            })
        }
    }
    _init() {
        super._init();
        this._initFileInput();
        this._initLabel();
        this._setUploadStrategy();
        this._createFiles();
        this._createBeforeSendAction();
        this._createUploadStartedAction();
        this._createUploadedAction();
        this._createFilesUploadedAction();
        this._createProgressAction();
        this._createUploadErrorAction();
        this._createUploadAbortedAction();
        this._createDropZoneEnterAction();
        this._createDropZoneLeaveAction()
    }
    _setUploadStrategy() {
        const {
            chunkSize: chunkSize = 0
        } = this.option();
        if (chunkSize > 0) {
            const {
                uploadChunk: uploadChunk
            } = this.option();
            this._uploadStrategy = uploadChunk && isFunction(uploadChunk) ? new CustomChunksFileUploadStrategy(this) : new DefaultChunksFileUploadStrategy(this)
        } else {
            const {
                uploadFile: uploadFile
            } = this.option();
            this._uploadStrategy = uploadFile && isFunction(uploadFile) ? new CustomWholeFileUploadStrategy(this) : new DefaultWholeFileUploadStrategy(this)
        }
    }
    _initFileInput() {
        this._isCustomClickEvent = false;
        const {
            multiple: multiple,
            accept: accept,
            hint: hint
        } = this.option();
        if (!this._$fileInput) {
            this._$fileInput = renderFileUploaderInput();
            eventsEngine.on(this._$fileInput, "change", this._inputChangeHandler.bind(this));
            eventsEngine.on(this._$fileInput, "click", (e => {
                e.stopPropagation();
                this._resetInputValue();
                const {
                    useNativeInputClick: useNativeInputClick
                } = this.option();
                return useNativeInputClick || this._isCustomClickEvent
            }))
        }
        const inputProps = {
            multiple: multiple,
            accept: accept,
            tabIndex: -1
        };
        if (isDefined(hint)) {
            inputProps.title = hint
        }
        this._$fileInput.prop(inputProps)
    }
    _inputChangeHandler() {
        if (this._doPreventInputChange) {
            return
        }
        const fileName = this._$fileInput.val().replace(/^.*\\/, "");
        const files = this._$fileInput.prop("files");
        const {
            uploadMode: uploadMode
        } = this.option();
        if (files && !files.length && "useForm" !== uploadMode) {
            return
        }
        const value = files ? this._getFiles(files) : [{
            name: fileName
        }];
        this._changeValue(value);
        if ("instantly" === uploadMode) {
            this._uploadFiles()
        }
    }
    _shouldFileListBeExtended() {
        const {
            uploadMode: uploadMode,
            extendSelection: extendSelection,
            multiple: multiple
        } = this.option();
        return Boolean("useForm" !== uploadMode && extendSelection && multiple)
    }
    _changeValue(value) {
        const {
            value: currentValue
        } = this.option();
        const files = this._shouldFileListBeExtended() ? null === currentValue || void 0 === currentValue ? void 0 : currentValue.slice() : [];
        this.option({
            value: null === files || void 0 === files ? void 0 : files.concat(value)
        })
    }
    _getFiles(fileList) {
        return [...fileList]
    }
    _getFile(fileData) {
        var _this$_files;
        const {
            value: value
        } = this.option();
        const targetFileValue = isNumeric(fileData) ? null === value || void 0 === value ? void 0 : value[fileData] : fileData;
        return null === (_this$_files = this._files) || void 0 === _this$_files ? void 0 : _this$_files.filter((file => file.value === targetFileValue))[0]
    }
    _initLabel() {
        if (!this._$inputLabel) {
            this._$inputLabel = $("<div>")
        }
        this._updateInputLabelText()
    }
    _updateInputLabelText() {
        const {
            labelText: labelText
        } = this.option();
        const correctedValue = this._isInteractionDisabled() ? "" : labelText;
        this._$inputLabel.text(correctedValue ?? "")
    }
    _focusTarget() {
        return this.$element().find(".dx-fileuploader-button")
    }
    _getSubmitElement() {
        return this._$fileInput
    }
    _initMarkup() {
        super._initMarkup();
        this.$element().addClass("dx-fileuploader");
        this._renderWrapper();
        this._renderInputWrapper();
        this._renderSelectButton();
        this._renderInputContainer();
        this._renderUploadButton();
        this._preventRecreatingFiles = true;
        this._activeDropZone = null
    }
    _render() {
        const {
            dropZone: dropZone
        } = this.option();
        this._preventRecreatingFiles = false;
        this._attachDragEventHandlers(this._$inputWrapper);
        this._attachDragEventHandlers(dropZone);
        this._renderFiles();
        super._render()
    }
    _createFileProgressBar(file) {
        file.progressBar = this._createProgressBar(file.value.size);
        if (file.$file) {
            file.progressBar.$element().appendTo(file.$file)
        }
        this._initStatusMessage(file);
        this._ensureCancelButtonInitialized(file)
    }
    _setStatusMessage(file) {
        let message = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
        setTimeout((() => {
            const {
                showFileList: showFileList
            } = this.option();
            if (showFileList) {
                if (file.$statusMessage) {
                    var _file$progressBar2;
                    file.$statusMessage.text(message);
                    file.$statusMessage.css("display", "");
                    null === (_file$progressBar2 = file.progressBar) || void 0 === _file$progressBar2 || _file$progressBar2.$element().remove()
                }
            }
        }), 400)
    }
    _getUploadAbortedStatusMessage() {
        const {
            uploadMode: uploadMode,
            uploadAbortedMessage: uploadAbortedMessage,
            readyToUploadMessage: readyToUploadMessage
        } = this.option();
        return "instantly" === uploadMode ? uploadAbortedMessage : readyToUploadMessage
    }
    _createFiles() {
        const {
            value: files
        } = this.option();
        if (this._files && (0 === (null === files || void 0 === files ? void 0 : files.length) || !this._shouldFileListBeExtended())) {
            this._preventFilesUploading(this._files);
            this._files = null
        }
        if (!this._files) {
            this._files = []
        }
        null === files || void 0 === files || files.slice(this._files.length).forEach((value => {
            var _this$_files2;
            const file = this._createFile(value);
            this._validateFile(file);
            null === (_this$_files2 = this._files) || void 0 === _this$_files2 || _this$_files2.push(file)
        }))
    }
    _preventFilesUploading(files) {
        null === files || void 0 === files || files.forEach((file => this._uploadStrategy.abortUpload(file)))
    }
    _validateFile(file) {
        file.isValidFileExtension = this._validateFileExtension(file);
        file.isValidMinSize = this._validateMinFileSize(file);
        file.isValidMaxSize = this._validateMaxFileSize(file)
    }
    _validateFileExtension(file) {
        const {
            allowedFileExtensions: allowedFileExtensions
        } = this.option();
        if (!(null !== allowedFileExtensions && void 0 !== allowedFileExtensions && allowedFileExtensions.length)) {
            return true
        }
        return this._isFileExtensionAllowed(file.value, allowedFileExtensions)
    }
    _validateMaxFileSize(file) {
        const fileSize = file.value.size;
        const {
            maxFileSize: maxFileSize = 0
        } = this.option();
        return maxFileSize > 0 ? fileSize <= maxFileSize : true
    }
    _validateMinFileSize(file) {
        const fileSize = file.value.size;
        const {
            minFileSize: minFileSize = 0
        } = this.option();
        return minFileSize > 0 ? fileSize >= minFileSize : true
    }
    _isFileExtensionAllowed(file, allowedExtensions) {
        for (let i = 0, n = allowedExtensions.length; i < n; i += 1) {
            let allowedExtension = allowedExtensions[i];
            if (allowedExtension.startsWith(".")) {
                allowedExtension = allowedExtension.replace(".", "\\.");
                if (new RegExp(`${allowedExtension}$`, "i").exec(file.name)) {
                    return true
                }
            } else {
                allowedExtension = allowedExtension.replace(new RegExp("\\*", "g"), "");
                if (new RegExp(allowedExtension, "i").exec(file.type)) {
                    return true
                }
            }
        }
        return false
    }
    _createBeforeSendAction() {
        this._beforeSendAction = this._createActionByOption("onBeforeSend", {
            excludeValidators: ["readOnly"]
        })
    }
    _createUploadStartedAction() {
        this._uploadStartedAction = this._createActionByOption("onUploadStarted", {
            excludeValidators: ["readOnly"]
        })
    }
    _createUploadedAction() {
        this._uploadedAction = this._createActionByOption("onUploaded", {
            excludeValidators: ["readOnly"]
        })
    }
    _createFilesUploadedAction() {
        this._filesUploadedAction = this._createActionByOption("onFilesUploaded", {
            excludeValidators: ["readOnly"]
        })
    }
    _createProgressAction() {
        this._progressAction = this._createActionByOption("onProgress", {
            excludeValidators: ["readOnly"]
        })
    }
    _createUploadAbortedAction() {
        this._uploadAbortedAction = this._createActionByOption("onUploadAborted", {
            excludeValidators: ["readOnly"]
        })
    }
    _createUploadErrorAction() {
        this._uploadErrorAction = this._createActionByOption("onUploadError", {
            excludeValidators: ["readOnly"]
        })
    }
    _createDropZoneEnterAction() {
        this._dropZoneEnterAction = this._createActionByOption("onDropZoneEnter")
    }
    _createDropZoneLeaveAction() {
        this._dropZoneLeaveAction = this._createActionByOption("onDropZoneLeave")
    }
    _createFile(value) {
        return {
            value: value,
            loadedSize: 0,
            onProgress: Callbacks(),
            onAbort: Callbacks(),
            onLoad: Callbacks(),
            onError: Callbacks(),
            onLoadStart: Callbacks(),
            isValidFileExtension: true,
            isValidMaxSize: true,
            isValidMinSize: true,
            isValid() {
                return Boolean(this.isValidFileExtension) && Boolean(this.isValidMaxSize) && Boolean(this.isValidMinSize)
            },
            isInitialized: false
        }
    }
    _resetFileState(file) {
        file.isAborted = false;
        file.uploadStarted = false;
        file.isStartLoad = false;
        file.loadedSize = 0;
        file.chunksData = void 0;
        file.request = void 0
    }
    _renderFiles() {
        var _this$_validationMess;
        const {
            value: value,
            showFileList: showFileList
        } = this.option();
        if (!this._$filesContainer) {
            this._$filesContainer = $("<div>").addClass("dx-fileuploader-files-container").appendTo(this._$content)
        } else if (!this._shouldFileListBeExtended() || 0 === (null === value || void 0 === value ? void 0 : value.length)) {
            this._$filesContainer.empty()
        }
        if (showFileList) {
            var _this$_files3;
            null === (_this$_files3 = this._files) || void 0 === _this$_files3 || _this$_files3.forEach((file => {
                if (!file.$file) {
                    this._renderFile(file)
                }
            }))
        }
        this.$element().toggleClass("dx-fileuploader-show-file-list", showFileList);
        this._toggleFileUploaderEmptyClassName();
        this._updateFileNameMaxWidth();
        null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess || _this$_validationMess.repaint()
    }
    _renderFile(file) {
        const {
            value: value
        } = file;
        if (!this._$filesContainer) {
            return
        }
        const $fileContainer = $("<div>").addClass("dx-fileuploader-file-container").appendTo(this._$filesContainer);
        this._renderFileButtons(file, $fileContainer);
        file.$file = $("<div>").addClass("dx-fileuploader-file").appendTo($fileContainer);
        const $fileInfo = $("<div>").addClass("dx-fileuploader-file-info").appendTo(file.$file);
        file.$statusMessage = $("<div>").addClass("dx-fileuploader-file-status-message").appendTo(file.$file);
        $("<div>").addClass("dx-fileuploader-file-name").text(value.name).appendTo($fileInfo);
        if (isDefined(value.size)) {
            $("<div>").addClass("dx-fileuploader-file-size").text(this._getFileSize(value.size)).appendTo($fileInfo)
        }
        if (file.isValid()) {
            const {
                readyToUploadMessage: readyToUploadMessage
            } = this.option();
            file.$statusMessage.text(readyToUploadMessage ?? "")
        } else {
            if (!file.isValidFileExtension) {
                file.$statusMessage.append(this._createValidationElement("invalidFileExtensionMessage"))
            }
            if (!file.isValidMaxSize) {
                file.$statusMessage.append(this._createValidationElement("invalidMaxFileSizeMessage"))
            }
            if (!file.isValidMinSize) {
                file.$statusMessage.append(this._createValidationElement("invalidMinFileSizeMessage"))
            }
            $fileContainer.addClass("dx-fileuploader-invalid")
        }
    }
    _createValidationElement(key) {
        return $("<span>").text(this.option()[key])
    }
    _updateFileNameMaxWidth() {
        var _this$_$filesContaine, _this$_$filesContaine2, _this$_$filesContaine3, _this$_$filesContaine4;
        const {
            allowCanceling: allowCanceling,
            uploadMode: uploadMode
        } = this.option();
        const cancelButtonsCount = allowCanceling && "useForm" !== uploadMode ? 1 : 0;
        const uploadButtonsCount = "useButtons" === uploadMode ? 1 : 0;
        const filesContainerWidth = getWidth(null === (_this$_$filesContaine = this._$filesContainer) || void 0 === _this$_$filesContaine ? void 0 : _this$_$filesContaine.find(".dx-fileuploader-file-container").first()) || getWidth(this._$filesContainer);
        const $buttonContainer = null === (_this$_$filesContaine2 = this._$filesContainer) || void 0 === _this$_$filesContaine2 ? void 0 : _this$_$filesContaine2.find(".dx-fileuploader-button-container").eq(0);
        const buttonsWidth = getWidth($buttonContainer) * (cancelButtonsCount + uploadButtonsCount);
        const $fileSize = null === (_this$_$filesContaine3 = this._$filesContainer) || void 0 === _this$_$filesContaine3 ? void 0 : _this$_$filesContaine3.find(".dx-fileuploader-file-size").eq(0);
        const prevFileSize = null === $fileSize || void 0 === $fileSize ? void 0 : $fileSize.text();
        null === $fileSize || void 0 === $fileSize || $fileSize.text("1000 Mb");
        const fileSizeWidth = getWidth($fileSize);
        null === $fileSize || void 0 === $fileSize || $fileSize.text(prevFileSize ?? "");
        null === (_this$_$filesContaine4 = this._$filesContainer) || void 0 === _this$_$filesContaine4 || _this$_$filesContaine4.find(".dx-fileuploader-file-name").css("maxWidth", filesContainerWidth - buttonsWidth - fileSizeWidth)
    }
    _renderFileButtons(file, $container) {
        const $cancelButton = this._getCancelButton(file);
        if ($cancelButton) {
            $container.append($cancelButton)
        }
        const $uploadButton = this._getUploadButton(file);
        if ($uploadButton) {
            $container.append($uploadButton)
        }
    }
    _getCancelButton(file) {
        const {
            uploadMode: uploadMode
        } = this.option();
        if ("useForm" === uploadMode) {
            return null
        }
        const {
            allowCanceling: allowCanceling,
            readOnly: readOnly,
            hoverStateEnabled: hoverStateEnabled,
            _buttonStylingMode: _buttonStylingMode
        } = this.option();
        file.cancelButton = this._createComponent($("<div>").addClass("dx-fileuploader-button dx-fileuploader-cancel-button"), Button, {
            onClick: () => {
                this._removeFile(file)
            },
            icon: "close",
            visible: allowCanceling,
            disabled: readOnly,
            integrationOptions: {},
            hoverStateEnabled: hoverStateEnabled,
            stylingMode: _buttonStylingMode
        });
        return $("<div>").addClass("dx-fileuploader-button-container").append(file.cancelButton.$element())
    }
    _getUploadButton(file) {
        const {
            uploadMode: uploadMode
        } = this.option();
        if (!file.isValid() || "useButtons" !== uploadMode) {
            return null
        }
        const {
            hoverStateEnabled: hoverStateEnabled,
            _buttonStylingMode: _buttonStylingMode
        } = this.option();
        file.uploadButton = this._createComponent($("<div>").addClass("dx-fileuploader-button dx-fileuploader-upload-button"), Button, {
            onClick: () => this._uploadFile(file),
            icon: "upload",
            hoverStateEnabled: hoverStateEnabled,
            stylingMode: _buttonStylingMode
        });
        file.onLoadStart.add((() => {
            var _file$uploadButton;
            return null === (_file$uploadButton = file.uploadButton) || void 0 === _file$uploadButton ? void 0 : _file$uploadButton.option({
                visible: false,
                disabled: true
            })
        }));
        file.onAbort.add((() => {
            var _file$uploadButton2;
            return null === (_file$uploadButton2 = file.uploadButton) || void 0 === _file$uploadButton2 ? void 0 : _file$uploadButton2.option({
                visible: true,
                disabled: false
            })
        }));
        return $("<div>").addClass("dx-fileuploader-button-container").append(file.uploadButton.$element())
    }
    _removeFile(file) {
        var _file$$file, _this$_files4;
        null === (_file$$file = file.$file) || void 0 === _file$$file || _file$$file.parent().remove();
        null === (_this$_files4 = this._files) || void 0 === _this$_files4 || _this$_files4.splice(this._files.indexOf(file), 1);
        const {
            value: value
        } = this.option();
        const valueCopy = null === value || void 0 === value ? void 0 : value.slice();
        null === valueCopy || void 0 === valueCopy || valueCopy.splice(valueCopy.indexOf(file.value), 1);
        this._preventRecreatingFiles = true;
        this.option({
            value: valueCopy
        });
        this._preventRecreatingFiles = false;
        this._toggleFileUploaderEmptyClassName();
        this._resetInputValue(true)
    }
    removeFile(fileData) {
        const {
            uploadMode: uploadMode
        } = this.option();
        if ("useForm" === uploadMode || !isDefined(fileData)) {
            return
        }
        const file = this._getFile(fileData);
        if (file) {
            if (file.uploadStarted) {
                this._preventFilesUploading([file])
            }
            this._removeFile(file)
        }
    }
    _toggleFileUploaderEmptyClassName() {
        var _this$_files5;
        this.$element().toggleClass("dx-fileuploader-empty", !(null !== (_this$_files5 = this._files) && void 0 !== _this$_files5 && _this$_files5.length) || this._hasInvalidFile(this._files))
    }
    _hasInvalidFile(files) {
        return files.some((file => !file.isValid()))
    }
    _getFileSize(size) {
        const labels = [messageLocalization.format("dxFileUploader-bytes"), messageLocalization.format("dxFileUploader-kb"), messageLocalization.format("dxFileUploader-Mb"), messageLocalization.format("dxFileUploader-Gb")];
        const count = labels.length - 1;
        let value = size;
        let i = 0;
        while (i < count && value >= 1024) {
            value /= 1024;
            i += 1
        }
        return `${Math.round(value)} ${labels[i]}`
    }
    _renderSelectButton() {
        const $button = $("<div>").addClass("dx-fileuploader-button").appendTo(this._$inputWrapper);
        const {
            selectButtonText: selectButtonText,
            readOnly: readOnly,
            hoverStateEnabled: hoverStateEnabled
        } = this.option();
        this._selectButton = this._createComponent($button, Button, {
            text: selectButtonText,
            focusStateEnabled: false,
            integrationOptions: {},
            disabled: readOnly,
            hoverStateEnabled: hoverStateEnabled
        });
        if ("desktop" === devices.real().deviceType) {
            this._selectButton.option({
                onClick: () => this._selectFileDialogClickHandler()
            })
        } else {
            this._attachSelectFileDialogHandlers(this._selectButton.$element())
        }
        const {
            dialogTrigger: dialogTrigger
        } = this.option();
        this._attachSelectFileDialogHandlers(dialogTrigger)
    }
    _selectFileDialogClickHandler() {
        const {
            useNativeInputClick: useNativeInputClick
        } = this.option();
        if (useNativeInputClick || this._isInteractionDisabled()) {
            return
        }
        this._isCustomClickEvent = true;
        eventsEngine.trigger(this._$fileInput, "click");
        this._isCustomClickEvent = false
    }
    _attachSelectFileDialogHandlers(target) {
        if (!isDefined(target)) {
            return
        }
        this._detachSelectFileDialogHandlers(target);
        const $target = $(target);
        eventsEngine.on($target, addNamespace("click", "dxFileUploaderDialogTrigger"), (() => {
            this._selectFileDialogClickHandler()
        }));
        eventsEngine.on($target, addNamespace("keyup", "dxFileUploaderDialogTrigger"), (e => {
            const normalizedKeyName = normalizeKeyName(e);
            if ("enter" === normalizedKeyName || "space" === normalizedKeyName) {
                this._selectFileDialogClickHandler()
            }
        }))
    }
    _detachSelectFileDialogHandlers(target) {
        if (!isDefined(target)) {
            return
        }
        const $target = $(target);
        eventsEngine.off($target, ".dxFileUploaderDialogTrigger")
    }
    _renderUploadButton() {
        const {
            uploadButtonText: uploadButtonText,
            _uploadButtonType: _uploadButtonType,
            hoverStateEnabled: hoverStateEnabled,
            uploadMode: uploadMode
        } = this.option();
        if ("useButtons" !== uploadMode) {
            return
        }
        const $uploadButton = $("<div>").addClass("dx-fileuploader-button").addClass("dx-fileuploader-upload-button").appendTo(this._$content);
        this._uploadButton = this._createComponent($uploadButton, Button, {
            text: uploadButtonText,
            onClick: this._uploadButtonClickHandler.bind(this),
            type: _uploadButtonType,
            integrationOptions: {},
            hoverStateEnabled: hoverStateEnabled
        })
    }
    _uploadButtonClickHandler() {
        this._uploadFiles()
    }
    _shouldDragOverBeRendered() {
        const {
            readOnly: readOnly,
            uploadMode: uploadMode,
            nativeDropSupported: nativeDropSupported
        } = this.option();
        return !readOnly && ("useForm" !== uploadMode || nativeDropSupported)
    }
    _isInteractionDisabled() {
        const {
            readOnly: readOnly,
            disabled: disabled
        } = this.option();
        return Boolean(readOnly) || Boolean(disabled)
    }
    _renderInputContainer() {
        this._$inputContainer = $("<div>").addClass("dx-fileuploader-input-container").appendTo(this._$inputWrapper);
        this._$fileInput.addClass("dx-fileuploader-input");
        this._renderInput();
        const labelId = `dx-fileuploader-input-label-${new Guid}`;
        this._$inputLabel.attr("id", labelId).addClass("dx-fileuploader-input-label").appendTo(this._$inputContainer);
        this.setAria("labelledby", labelId, this._$fileInput)
    }
    _renderInput() {
        const {
            useNativeInputClick: useNativeInputClick,
            inputAttr: inputAttr
        } = this.option();
        if (useNativeInputClick) {
            this._selectButton.option({
                template: this._selectButtonInputTemplate.bind(this)
            })
        } else {
            this._$fileInput.appendTo(this._$inputContainer);
            this._selectButton.option({
                template: "content"
            })
        }
        this._applyInputAttributes(inputAttr)
    }
    _selectButtonInputTemplate(data, content) {
        const $content = $(content);
        const $text = $("<span>").addClass("dx-button-text").text(data.text);
        $content.append($text).append(this._$fileInput);
        return $content
    }
    _renderInputWrapper() {
        if (!this._$content) {
            return
        }
        this._$inputWrapper = $("<div>").addClass("dx-fileuploader-input-wrapper").appendTo(this._$content)
    }
    _detachDragEventHandlers(target) {
        if (!target) {
            return
        }
        eventsEngine.off($(target), addNamespace("", this.NAME))
    }
    _attachDragEventHandlers(target) {
        const isCustomTarget = target !== this._$inputWrapper;
        if (!isDefined(target) || !this._shouldDragOverBeRendered()) {
            return
        }
        this._detachDragEventHandlers(target);
        eventsEngine.on($(target), addNamespace("dragenter", this.NAME), this._dragEnterHandler.bind(this, isCustomTarget));
        eventsEngine.on($(target), addNamespace("dragover", this.NAME), this._dragOverHandler.bind(this, isCustomTarget));
        eventsEngine.on($(target), addNamespace("dragleave", this.NAME), this._dragLeaveHandler.bind(this, isCustomTarget));
        eventsEngine.on($(target), addNamespace("drop", this.NAME), this._dropHandler.bind(this, isCustomTarget))
    }
    _applyInputAttributes(customAttributes) {
        this._$fileInput.attr(customAttributes)
    }
    _useInputForDrop() {
        const {
            uploadMode: uploadMode,
            nativeDropSupported: nativeDropSupported
        } = this.option();
        return Boolean(nativeDropSupported) && "useForm" === uploadMode
    }
    _getDropZoneElement(isCustomTarget, e) {
        if (!e.currentTarget) {
            return
        }
        const {
            dropZone: dropZone
        } = this.option();
        const targetList = isCustomTarget ? $(dropZone).toArray() : [this._$inputWrapper];
        const targetListElements = targetList.map((element => $(element).get(0)));
        const currentTargetIndex = targetListElements.indexOf(e.currentTarget);
        return targetListElements[currentTargetIndex]
    }
    _dragEnterHandler(isCustomTarget, e) {
        const {
            disabled: disabled
        } = this.option();
        if (disabled) {
            return false
        }
        if (!this._useInputForDrop()) {
            e.preventDefault()
        }
        const dropZoneElement = this._getDropZoneElement(isCustomTarget, e);
        if (isDefined(dropZoneElement) && this._shouldRaiseDragOver(e, dropZoneElement)) {
            this._activeDropZone = dropZoneElement;
            this._tryToggleDropZoneActive(true, isCustomTarget, e)
        }
    }
    _shouldRaiseDragOver(e, dropZoneElement) {
        return null === this._activeDropZone && this.isMouseOverElement(e, dropZoneElement, false) && e.originalEvent.dataTransfer.types.find((item => "Files" === item))
    }
    _dragOverHandler(isCustomTarget, e) {
        if (!this._useInputForDrop()) {
            e.preventDefault()
        }
        e.originalEvent.dataTransfer.dropEffect = "copy";
        if (!isCustomTarget) {
            const dropZoneElement = this._getDropZoneElement(false, e);
            if (this._shouldRaiseDragOver(e, dropZoneElement)) {
                this._dragEnterHandler(false, e)
            }
            if (this._shouldRaiseDragLeave(e, false)) {
                this._dragLeaveHandler(false, e)
            }
        }
    }
    _dragLeaveHandler(isCustomTarget, e) {
        if (!this._useInputForDrop()) {
            e.preventDefault()
        }
        if (this._shouldRaiseDragLeave(e, isCustomTarget)) {
            this._tryToggleDropZoneActive(false, isCustomTarget, e);
            this._activeDropZone = null
        }
    }
    _shouldRaiseDragLeave(e, isCustomTarget) {
        return null !== this._activeDropZone && !this.isMouseOverElement(e, this._activeDropZone, !isCustomTarget, -1)
    }
    _tryToggleDropZoneActive(active, isCustom, event) {
        var _this$mouseAction;
        const classAction = active ? "addClass" : "removeClass";
        const mouseAction = active ? "_dropZoneEnterAction" : "_dropZoneLeaveAction";
        null === (_this$mouseAction = this[mouseAction]) || void 0 === _this$mouseAction || _this$mouseAction.call(this, {
            event: event,
            dropZoneElement: this._activeDropZone
        });
        if (!isCustom) {
            this.$element()[classAction]("dx-fileuploader-dragover")
        }
    }
    _dropHandler(isCustomTarget, e) {
        this._activeDropZone = null;
        if (!isCustomTarget) {
            this.$element().removeClass("dx-fileuploader-dragover")
        }
        if (this._useInputForDrop() || isCustomTarget && this._isInteractionDisabled()) {
            return
        }
        e.preventDefault();
        const fileList = e.originalEvent.dataTransfer.files;
        const files = this._getFiles(fileList);
        const {
            multiple: multiple
        } = this.option();
        if (!multiple && files.length > 1 || 0 === files.length) {
            return
        }
        this._changeValue(files);
        const {
            uploadMode: uploadMode
        } = this.option();
        if ("instantly" === uploadMode) {
            this._uploadFiles()
        }
    }
    _areAllFilesLoaded() {
        var _this$_files6;
        return null === (_this$_files6 = this._files) || void 0 === _this$_files6 ? void 0 : _this$_files6.every((file => !file.isValid() || file._isError || file._isLoaded || file.isAborted))
    }
    _handleAllFilesUploaded() {
        this._recalculateProgress();
        if (this._areAllFilesLoaded()) {
            var _this$_filesUploadedA;
            null === (_this$_filesUploadedA = this._filesUploadedAction) || void 0 === _this$_filesUploadedA || _this$_filesUploadedA.call(this)
        }
    }
    _renderWrapper() {
        const $wrapper = $("<div>").addClass("dx-fileuploader-wrapper").appendTo(this.$element());
        const $container = $("<div>").addClass("dx-fileuploader-container").appendTo($wrapper);
        this._$content = $("<div>").addClass("dx-fileuploader-content").appendTo($container)
    }
    _clean() {
        this._$fileInput.detach();
        this._$filesContainer = null;
        const {
            dialogTrigger: dialogTrigger,
            dropZone: dropZone
        } = this.option();
        this._detachSelectFileDialogHandlers(dialogTrigger);
        this._detachDragEventHandlers(dropZone);
        if (this._files) {
            this._files.forEach((file => {
                file.$file = null;
                file.$statusMessage = null
            }))
        }
        super._clean()
    }
    abortUpload(fileData) {
        const {
            uploadMode: uploadMode
        } = this.option();
        if ("useForm" === uploadMode) {
            return
        }
        if (isDefined(fileData)) {
            const file = this._getFile(fileData);
            if (file) {
                this._preventFilesUploading([file])
            }
        } else {
            this._preventFilesUploading(this._files)
        }
    }
    upload(fileData) {
        const {
            uploadMode: uploadMode
        } = this.option();
        if ("useForm" === uploadMode) {
            return
        }
        if (isDefined(fileData)) {
            const file = this._getFile(fileData);
            if (file && isFormDataSupported()) {
                this._uploadFile(file)
            }
        } else {
            this._uploadFiles()
        }
    }
    _uploadFiles() {
        if (isFormDataSupported()) {
            var _this$_files7;
            null === (_this$_files7 = this._files) || void 0 === _this$_files7 || _this$_files7.forEach((file => this._uploadFile(file)))
        }
    }
    _uploadFile(file) {
        this._uploadStrategy.upload(file)
    }
    _updateProgressBar(file, loadedFileData) {
        var _file$progressBar3, _this$_progressAction;
        null === (_file$progressBar3 = file.progressBar) || void 0 === _file$progressBar3 || _file$progressBar3.option({
            value: loadedFileData.loaded,
            showStatus: true
        });
        null === (_this$_progressAction = this._progressAction) || void 0 === _this$_progressAction || _this$_progressAction.call(this, {
            file: file.value,
            segmentSize: loadedFileData.currentSegmentSize,
            bytesLoaded: loadedFileData.loaded,
            bytesTotal: loadedFileData.total,
            event: loadedFileData.event,
            request: file.request
        })
    }
    _updateTotalProgress(totalFilesSize, totalLoadedFilesSize) {
        let progress = 0;
        if (isDefined(totalFilesSize)) {
            if (this._files && this._files.length > 0 && this._areAllFilesLoaded() && 0 === totalFilesSize && 0 === totalLoadedFilesSize) {
                progress = this._getProgressValue(1)
            } else if (totalFilesSize) {
                progress = this._getProgressValue(totalLoadedFilesSize / totalFilesSize)
            }
        }
        this.option({
            progress: progress
        });
        this._setLoadedSize(totalLoadedFilesSize)
    }
    _getProgressValue(ratio) {
        return Math.floor(100 * ratio)
    }
    _initStatusMessage(file) {
        var _file$$statusMessage;
        null === (_file$$statusMessage = file.$statusMessage) || void 0 === _file$$statusMessage || _file$$statusMessage.css("display", "none")
    }
    _ensureCancelButtonInitialized(file) {
        var _file$cancelButton;
        if (file.isInitialized) {
            return
        }
        null === (_file$cancelButton = file.cancelButton) || void 0 === _file$cancelButton || _file$cancelButton.option({
            onClick: () => {
                this._preventFilesUploading([file]);
                this._removeFile(file)
            }
        });
        const hideCancelButton = () => {
            setTimeout((() => {
                var _file$cancelButton2;
                null === (_file$cancelButton2 = file.cancelButton) || void 0 === _file$cancelButton2 || _file$cancelButton2.option({
                    visible: false
                })
            }), 400)
        };
        file.onLoad.add(hideCancelButton);
        file.onError.add(hideCancelButton)
    }
    _createProgressBar(fileSize) {
        return this._createComponent($("<div>"), ProgressBar, {
            value: void 0,
            min: 0,
            max: fileSize,
            statusFormat: ratio => `${this._getProgressValue(ratio)}%`,
            showStatus: false,
            statusPosition: "right"
        })
    }
    _getTotalFilesSize() {
        if (!this._totalFilesSize) {
            var _this$_files8;
            this._totalFilesSize = 0;
            null === (_this$_files8 = this._files) || void 0 === _this$_files8 || _this$_files8.forEach((file => {
                this._totalFilesSize += file.value.size
            }))
        }
        return this._totalFilesSize
    }
    _getTotalLoadedFilesSize() {
        if (!this._totalLoadedFilesSize) {
            var _this$_files9;
            this._totalLoadedFilesSize = 0;
            null === (_this$_files9 = this._files) || void 0 === _this$_files9 || _this$_files9.forEach((file => {
                this._totalLoadedFilesSize += file.loadedSize
            }))
        }
        return this._totalLoadedFilesSize
    }
    _setLoadedSize(value) {
        this._totalLoadedFilesSize = value
    }
    _recalculateProgress() {
        this._totalFilesSize = 0;
        this._totalLoadedFilesSize = 0;
        this._updateTotalProgress(this._getTotalFilesSize(), this._getTotalLoadedFilesSize())
    }
    isMouseOverElement(mouseEvent, element, correctPseudoElements) {
        let dragEventDelta = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
        if (!element) {
            return false
        }
        const beforeHeight = correctPseudoElements ? parseFloat(window.getComputedStyle(element, ":before").height) : 0;
        const afterHeight = correctPseudoElements ? parseFloat(window.getComputedStyle(element, ":after").height) : 0;
        const x = getOffset(element).left;
        const y = getOffset(element).top + beforeHeight;
        const w = element.offsetWidth;
        const h = element.offsetHeight - beforeHeight - afterHeight;
        const eventX = this._getEventX(mouseEvent);
        const eventY = this._getEventY(mouseEvent);
        return eventX + dragEventDelta >= x && eventX - dragEventDelta < x + w && eventY + dragEventDelta >= y && eventY - dragEventDelta < y + h
    }
    _getEventX(e) {
        return isTouchEvent(e) ? this._getTouchEventX(e) : e.clientX + this._getDocumentScrollLeft()
    }
    _getEventY(e) {
        return isTouchEvent(e) ? this._getTouchEventY(e) : e.clientY + this._getDocumentScrollTop()
    }
    _getTouchEventX(e) {
        let touchPoint = null;
        if (e.changedTouches.length > 0) {
            touchPoint = e.changedTouches
        } else if (e.targetTouches.length > 0) {
            touchPoint = e.targetTouches
        }
        return touchPoint ? touchPoint[0].pageX : 0
    }
    _getTouchEventY(e) {
        let touchPoint = null;
        if (e.changedTouches.length > 0) {
            touchPoint = e.changedTouches
        } else if (e.targetTouches.length > 0) {
            touchPoint = e.targetTouches
        }
        return touchPoint ? touchPoint[0].pageY : 0
    }
    _getDocumentScrollTop() {
        const document = domAdapter.getDocument();
        return document.documentElement.scrollTop || document.body.scrollTop
    }
    _getDocumentScrollLeft() {
        const document = domAdapter.getDocument();
        return document.documentElement.scrollLeft || document.body.scrollLeft
    }
    _updateReadOnlyState() {
        var _this$_files10;
        const {
            readOnly: readOnly
        } = this.option();
        this._selectButton.option({
            disabled: readOnly
        });
        null === (_this$_files10 = this._files) || void 0 === _this$_files10 || _this$_files10.forEach((file => {
            var _file$cancelButton3;
            return null === (_file$cancelButton3 = file.cancelButton) || void 0 === _file$cancelButton3 ? void 0 : _file$cancelButton3.option({
                disabled: readOnly
            })
        }));
        this._updateInputLabelText();
        this._attachDragEventHandlers(this._$inputWrapper)
    }
    _updateHoverState() {
        var _this$_selectButton, _this$_uploadButton, _this$_files11;
        const {
            hoverStateEnabled: value
        } = this.option();
        null === (_this$_selectButton = this._selectButton) || void 0 === _this$_selectButton || _this$_selectButton.option({
            hoverStateEnabled: value
        });
        null === (_this$_uploadButton = this._uploadButton) || void 0 === _this$_uploadButton || _this$_uploadButton.option({
            hoverStateEnabled: value
        });
        null === (_this$_files11 = this._files) || void 0 === _this$_files11 || _this$_files11.forEach((file => {
            var _file$uploadButton3, _file$cancelButton4;
            null === (_file$uploadButton3 = file.uploadButton) || void 0 === _file$uploadButton3 || _file$uploadButton3.option({
                hoverStateEnabled: value
            });
            null === (_file$cancelButton4 = file.cancelButton) || void 0 === _file$cancelButton4 || _file$cancelButton4.option({
                hoverStateEnabled: value
            })
        }))
    }
    _optionChanged(args) {
        var _this$_files12;
        const {
            name: name,
            value: value,
            previousValue: previousValue
        } = args;
        switch (name) {
            case "height":
            case "width":
                this._updateFileNameMaxWidth();
                super._optionChanged(args);
                break;
            case "value":
                if (!(null !== value && void 0 !== value && value.length)) {
                    this._$fileInput.val("")
                }
                if (!this._preventRecreatingFiles) {
                    this._createFiles();
                    this._renderFiles()
                }
                this._recalculateProgress();
                super._optionChanged(args);
                break;
            case "name":
            case "hint":
                this._initFileInput();
                super._optionChanged(args);
                break;
            case "accept":
                this._initFileInput();
                break;
            case "multiple":
                this._initFileInput();
                if (!args.value) {
                    this.clear()
                }
                break;
            case "readOnly":
                this._updateReadOnlyState();
                super._optionChanged(args);
                break;
            case "disabled":
                this._updateInputLabelText();
                super._optionChanged(args);
                break;
            case "selectButtonText":
                this._selectButton.option({
                    text: value
                });
                break;
            case "uploadButtonText":
                if (this._uploadButton) {
                    this._uploadButton.option({
                        text: value
                    })
                }
                break;
            case "_uploadButtonType":
                if (this._uploadButton) {
                    this._uploadButton.option({
                        type: value
                    })
                }
                break;
            case "_buttonStylingMode":
                null === (_this$_files12 = this._files) || void 0 === _this$_files12 || _this$_files12.forEach((file => {
                    var _file$uploadButton4, _file$cancelButton5;
                    null === (_file$uploadButton4 = file.uploadButton) || void 0 === _file$uploadButton4 || _file$uploadButton4.option({
                        stylingMode: value
                    });
                    null === (_file$cancelButton5 = file.cancelButton) || void 0 === _file$cancelButton5 || _file$cancelButton5.option({
                        stylingMode: value
                    })
                }));
                break;
            case "dialogTrigger":
                this._detachSelectFileDialogHandlers(previousValue);
                this._attachSelectFileDialogHandlers(value);
                break;
            case "dropZone":
                this._detachDragEventHandlers(previousValue);
                this._attachDragEventHandlers(value);
                break;
            case "maxFileSize":
            case "minFileSize":
            case "allowedFileExtensions":
            case "invalidFileExtensionMessage":
            case "invalidMaxFileSizeMessage":
            case "invalidMinFileSizeMessage":
            case "readyToUploadMessage":
            case "uploadedMessage":
            case "uploadFailedMessage":
            case "uploadAbortedMessage":
            case "nativeDropSupported":
                this._invalidate();
                break;
            case "labelText":
                this._updateInputLabelText();
                break;
            case "showFileList":
                if (!this._preventRecreatingFiles) {
                    this._renderFiles()
                }
                break;
            case "uploadFile":
            case "uploadChunk":
            case "chunkSize":
                this._setUploadStrategy();
                break;
            case "abortUpload":
            case "uploadUrl":
            case "progress":
            case "uploadMethod":
            case "uploadHeaders":
            case "uploadCustomData":
            case "extendSelection":
                break;
            case "hoverStateEnabled":
                this._updateHoverState();
                super._optionChanged(args);
                break;
            case "allowCanceling":
            case "uploadMode":
                this.clear();
                this._invalidate();
                break;
            case "onBeforeSend":
                this._createBeforeSendAction();
                break;
            case "onUploadStarted":
                this._createUploadStartedAction();
                break;
            case "onUploaded":
                this._createUploadedAction();
                break;
            case "onFilesUploaded":
                this._createFilesUploadedAction();
                break;
            case "onProgress":
                this._createProgressAction();
                break;
            case "onUploadError":
                this._createUploadErrorAction();
                break;
            case "onUploadAborted":
                this._createUploadAbortedAction();
                break;
            case "onDropZoneEnter":
                this._createDropZoneEnterAction();
                break;
            case "onDropZoneLeave":
                this._createDropZoneLeaveAction();
                break;
            case "useNativeInputClick":
                this._renderInput();
                break;
            case "useDragOver":
                this._attachDragEventHandlers(this._$inputWrapper);
                break;
            case "inputAttr":
                this._applyInputAttributes(this.option()[name]);
                break;
            default:
                super._optionChanged(args)
        }
    }
    _resetInputValue(force) {
        const {
            uploadMode: uploadMode
        } = this.option();
        if ("useForm" === uploadMode && !force) {
            return
        }
        this._doPreventInputChange = true;
        this._$fileInput.val("");
        this._doPreventInputChange = false
    }
    clear() {
        this.option({
            value: []
        })
    }
}
registerComponent("dxFileUploader", FileUploader);
export default FileUploader;
