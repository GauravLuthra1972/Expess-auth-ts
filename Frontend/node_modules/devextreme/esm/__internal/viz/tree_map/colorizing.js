/**
 * DevExtreme (esm/__internal/viz/tree_map/colorizing.js)
 * Version: 25.1.6
 * Build date: Mon Oct 13 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    noop as _noop
} from "../../../core/utils/common";
import {
    normalizeEnum as _normalizeEnum
} from "../../viz/core/utils";
const colorizers = {};
let defaultColorizerName;

function wrapLeafColorGetter(getter) {
    return function(node) {
        return !node.isNode() ? getter(node) : void 0
    }
}

function wrapGroupColorGetter(getter) {
    return function(node) {
        const parent = !node.isNode() && node.parent;
        return parent ? parent._groupColor = parent._groupColor || getter(parent) : void 0
    }
}
export function getColorizer(options, themeManager, root) {
    var _colorizers$type;
    const type = _normalizeEnum(options.type || defaultColorizerName);
    const colorizer = null === (_colorizers$type = colorizers[type]) || void 0 === _colorizers$type ? void 0 : _colorizers$type.call(colorizers, options, themeManager, root);
    return colorizer ? (options.colorizeGroups ? wrapGroupColorGetter : wrapLeafColorGetter)(colorizer) : _noop
}
export function addColorizer(name, colorizer) {
    colorizers[name] = colorizer
}
export function setDefaultColorizer(name) {
    defaultColorizerName = name
}

function getValueAsColorCode(node) {
    return node.value
}

function createColorCode(colorCodeField) {
    return function(node) {
        return Number(node.data[colorCodeField])
    }
}
export function createColorCodeGetter(options) {
    return options.colorCodeField ? createColorCode(options.colorCodeField) : getValueAsColorCode
}
