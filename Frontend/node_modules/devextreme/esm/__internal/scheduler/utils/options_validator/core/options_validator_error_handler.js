/**
 * DevExtreme (esm/__internal/scheduler/utils/options_validator/core/options_validator_error_handler.js)
 * Version: 25.1.6
 * Build date: Mon Oct 13 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
const getValidatorErrorUniqueKey = (errorCode, validatorError) => {
    if ("boolean" === typeof validatorError || !Array.isArray(validatorError.arguments)) {
        return errorCode
    }
    return `${errorCode}${JSON.stringify(validatorError.arguments)}`
};
const getValidatorErrorArguments = validatorError => "boolean" === typeof validatorError || !Array.isArray(validatorError.arguments) ? [] : validatorError.arguments;
export class OptionsValidatorErrorHandler {
    constructor(validatorNameToErrorCodeMap, globalErrorHandler) {
        this.validatorNameToErrorCodeMap = validatorNameToErrorCodeMap;
        this.globalErrorHandler = globalErrorHandler
    }
    handleValidationResult(optionsValidatorResult) {
        if (true === optionsValidatorResult) {
            return
        }
        const warningsMap = new Map;
        const errorsMap = new Map;
        Object.entries(optionsValidatorResult).forEach((_ref => {
            let [validatorName, validatorErrorRecord] = _ref;
            const errorCode = this.validatorNameToErrorCodeMap[validatorName];
            if (!errorCode) {
                return
            }
            const logMap = errorCode.startsWith("E") ? errorsMap : warningsMap;
            Object.values(validatorErrorRecord).forEach((validatorError => {
                const uniqueKey = getValidatorErrorUniqueKey(errorCode, validatorError);
                const args = getValidatorErrorArguments(validatorError);
                logMap.set(uniqueKey, {
                    errorCode: errorCode,
                    args: args
                })
            }))
        }));
        Array.from(warningsMap).forEach((value => {
            const [, {
                errorCode: errorCode,
                args: args
            }] = value;
            this.globalErrorHandler.logError(errorCode, ...args)
        }));
        Array.from(errorsMap).forEach(((value, idx) => {
            const [, {
                errorCode: errorCode,
                args: args
            }] = value;
            const isLastErrorCode = idx === errorsMap.size - 1;
            if (!isLastErrorCode) {
                this.globalErrorHandler.logError(errorCode, ...args)
            } else {
                this.globalErrorHandler.throwError(errorCode, ...args)
            }
        }))
    }
}
