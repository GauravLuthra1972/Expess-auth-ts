/**
 * DevExtreme (esm/__internal/scheduler/scheduler_options_base_widget.js)
 * Version: 25.1.6
 * Build date: Mon Oct 13 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import Widget from "../../ui/widget/ui.widget";
import {
    extend
} from "../core/utils/m_extend";
import {
    DEFAULT_SCHEDULER_INTEGRATION_OPTIONS,
    DEFAULT_SCHEDULER_INTERNAL_OPTIONS,
    DEFAULT_SCHEDULER_OPTIONS,
    DEFAULT_SCHEDULER_OPTIONS_RULES,
    DEPRECATED_SCHEDULER_OPTIONS
} from "./utils/options/constants";
import {
    getCurrentView,
    getViewOption,
    getViews
} from "./utils/options/utils";
import {
    SchedulerOptionsValidator,
    SchedulerOptionsValidatorErrorsHandler
} from "./utils/options_validator/index";
export class SchedulerOptionsBaseWidget extends Widget {
    constructor() {
        super(...arguments);
        this.views = []
    }
    _init() {
        super._init();
        this.optionsValidator = new SchedulerOptionsValidator;
        this.optionsValidatorErrorHandler = new SchedulerOptionsValidatorErrorsHandler
    }
    _getDefaultOptions() {
        const options = super._getDefaultOptions();
        return extend(true, options, _extends({}, DEFAULT_SCHEDULER_OPTIONS, DEFAULT_SCHEDULER_INTERNAL_OPTIONS, DEFAULT_SCHEDULER_INTEGRATION_OPTIONS))
    }
    _setDeprecatedOptions() {
        super._setDeprecatedOptions();
        extend(this._deprecatedOptions, DEPRECATED_SCHEDULER_OPTIONS)
    }
    _defaultOptionsRules() {
        const rules = super._defaultOptionsRules();
        return rules.concat(DEFAULT_SCHEDULER_OPTIONS_RULES)
    }
    updateViews() {
        const views = this.option("views") ?? [];
        this.views = getViews(views);
        this.currentView = getCurrentView(this.option("currentView") ?? "", views)
    }
    _initMarkup() {
        super._initMarkup();
        this.updateViews();
        this.validateOptions()
    }
    schedulerOptionChanged(args) {
        switch (args.name) {
            case "currentView":
            case "views":
                this.updateViews()
        }
        this.validateOptions()
    }
    validateOptions() {
        const currentViewOptions = _extends({}, this.option(), {
            startDayHour: this.getViewOption("startDayHour"),
            endDayHour: this.getViewOption("endDayHour"),
            offset: this.getViewOption("offset"),
            cellDuration: this.getViewOption("cellDuration")
        });
        const validationResult = this.optionsValidator.validate(currentViewOptions);
        this.optionsValidatorErrorHandler.handleValidationResult(validationResult)
    }
    getViewOption(optionName) {
        var _this$currentView;
        const viewOptionValue = null === (_this$currentView = this.currentView) || void 0 === _this$currentView ? void 0 : _this$currentView[optionName];
        const optionValue = viewOptionValue ?? this.option(optionName);
        return getViewOption(optionName, optionValue)
    }
    hasAgendaView() {
        return this.views.some((view => "agenda" === view.type || "agenda" === view.name))
    }
}
